-- 집계함수
-- 데이터를 요약해서 보고싶을때
--- 아래는 지역별로 QTY 평균을 보고싶을때의 쿼리
SELECT REGIONID, AVG(QTY) FROM 
KOPO_CHANNEL_SEASONALITY_NEW
GROUP BY REGIONID;--키워드 : GROUP BY

-- 조금 더 자세히 알고 싶을 때
-- GROUP BY했을때 GROUP KEY는 반드시 SELECT문에 포함되어야 함
SELECT REGIONID, PRODUCT, AVG(QTY)
FROM
KOPO_CHANNEL_SEASONALITY_NEW
GROUP BY REGIONID, PRODUCT
ORDER BY REGIONID, PRODUCT; -- ORDER BY : 정렬



SELECT REGIONID, PRODUCT, COUNT(QTY)
FROM
KOPO_CHANNEL_SEASONALITY_NEW
GROUP BY REGIONID, PRODUCT
ORDER BY REGIONID, PRODUCT;

SELECT * FROM KOPO_CHANNEL_SEASONALITY_NEW;

-- 집계 함수에서는 조건절을 사용할떄 'HAVING' 이라는 키워드 사용
SELECT REGIONID, 
       PRODUCT, 
       AVG(QTY) AS AVG_QTY, 
       SUM(QTY) AS SUM_QTY
FROM
KOPO_CHANNEL_SEASONALITY_NEW
GROUP BY REGIONID, PRODUCT
HAVING SUM(QTY) > 100000
ORDER BY REGIONID, PRODUCT;

-- 서브 쿼리
--- 1. FROM 절 안에 서브쿼리 작성(인라인 뷰라고 불림)
SELECT A.*
FROM(SELECT * 
    FROM KOPO_CHANNEL_SEASONALITY_NEW
    WHERE 1=1
    AND REGIONID = 'A01')A;

--- 2. WHERE 절 안에 서브쿼리 작성(중첩서브쿼리)
SELECT *
FROM KOPO_CHANNEL_SEASONALITY_NEW
WHERE 1=1
AND REGIONID IN(SELECT REGIONID
            FROM KOPO_PRODUCT_VOLUME);


-- 2-1. OR조건을 추가하여 WHERE절 안에 서브쿼리 작성
SELECT A.*
FROM KOPO_CHANNEL_SEASONALITY_NEW A
WHERE 1=1
AND REGIONID || PRODUCT IN (
    SELECT REGIONID || PRODUCT
    FROM
    KOPO_PROMOTION2);
    
SELECT * FROM KOPO_PROMOTION2;

-- 3. SELECT 절 안에 서브쿼리 작성(단일 값을 리턴해야함)
SELECT A.*,
    (SELECT AVG(QTY)
    FROM KOPO_CHANNEL_SEASONALITY_NEW
    WHERE REGIONID = A.REGIONID
    AND PRODUCT = A.PRODUCT
    GROUP BY A.REGIONID, A.PRODUCT) AS SUM_QTY
FROM KOPO_CHANNEL_SEASONALITY_NEW A;

-- 4. WITH 서브쿼리
--- WITH를 활용하여 서브쿼리를 수행한 후 WITH로 생성한 테이블명 적용
WITH TEST AS(
    SELECT ITEM, YEARWEEK, QTY, ABS(QTY-PREDICTION) AS DIFF
    FROM RMSE_MAE_EXAMPLE
    )
SELECT AVG(DIFF)
FROM TEST A;

-- MAE : 각 실제값과 예측값의 절대값 차이의 평균
-- RMSE : 각 실제값과 예측값의 절대값 차이를 제곱한 후 평균을 산출 -> 이후 SORT~!

SELECT * FROM RMSE_MAE_EXAMPLE;

--- QUIZ. ITEM별 RMSE 구하기
WITH TEST2 AS(
    SELECT ITEM, 
    YEARWEEK,
     QTY, 
     POWER(ABS(QTY-PREDICTION),2) AS RMSE --POWER : 제곱키워드
    FROM RMSE_MAE_EXAMPLE
    )
SELECT ITEM, 
    AVG(RMSE) AS MAE,
    SQRT(AVG(RMSE)) AS RMSE --SQRT : 루트
FROM TEST2 
GROUP BY ITEM;


-- 데이터 조인
--- 1. INNER 조인 : 테이블의 키를 정의하고 키가 서로 존재하는 경우의 자료만 조회할 떄
--- 서로 키값이 있는 경우만 합치고 겹치지 않는경우에는 버림(교집합)
--- Tunning tip : 크기가 작은 데이터를 앞에 넣음 => 속도 빨라짐

SELECT A.REGIONID, B.REGIONNAME, A.PRODUCT, A.YEARWEEK, A.QTY
FROM KOPO_CHANNEL_SEASONALITY_NEW A
INNER JOIN KOPO_REGION_MST B
ON A.REGIONID = B.REGIONNAME_NEW;

SELECT * FROM KOPO_REGION_MST;

SELECT * FROM KOPO_CHANNEL_SEASONALITY_NEW;

-- 2. LEFT JOIN : 기존데이터를 무조건 다 살려야될 때

-- 3. RIGHT JOIN : B테이블의 데이터도 모두 살려야될 때
SELECT A.*, B.*
FROM
KOPO_CHANNEL_SEASONALITY_NEW A
RIGHT JOIN KOPO_REGION_MST B
ON A.REGIONID = B.REGIONID
WHERE A.QTY IS NULL;

-- 4. FULL OUTER JOIN : 왼쪽, 오른쪽 모두 살리고 싶을 때
SELECT A.*, B.*
FROM
KOPO_CHANNEL_SEASONALITY_NEW A
FULL OUTER JOIN KOPO_REGION_MST B
ON A.REGIONID = B.REGIONID
WHERE 1=1
AND A.REGIONID = 'A77';
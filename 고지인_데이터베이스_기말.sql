SELECT * FROM PRO_FCST_RESULT_6WEEK;

-- STEP1. 각 테이블(1주차~6주차) PLANWEEK 생성
---1-1. 13주차 테이블 PLANWEEK 생성
CREATE TABLE
    PRO_FCST_RESULT_6WEEK_13 AS
SELECT
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    '201913' AS PLANWEEK,
    YEAR,
    WEEK,
    QTY,
    OUTFCST
FROM PRO_FCST_RESULT_6WEEK
WHERE 1=1 
AND YEAR='2019'
AND WEEK='18';

SELECT * FROM PRO_FCST_RESULT_6WEEK_13;

DROP TABLE PRO_FCST_RESULT_6WEEK_13;

-- 1-2.14주차 PLANWEEK
CREATE TABLE
    PRO_FCST_RESULT_5WEEK_14 AS
SELECT
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    '201914' AS YEARWEEK,
    YEAR,
    WEEK,
    QTY,
    OUTFCST
FROM PRO_FCST_RESULT_5WEEK
WHERE 1=1
AND YEAR='2019'
AND WEEK='18';

--- 1-3. 15주차 PLANWEEK
CREATE TABLE
    PRO_FCST_RESULT_4WEEK_15 AS
SELECT 
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    '201915' AS PLANWEEK,
    YEAR,
    WEEK,
    QTY,
    OUTFCST
FROM PRO_FCST_RESULT_4WEEK
WHERE 1=1
AND YEAR='2019'
AND WEEK='18';

--- 1-4. 16주차 PLANWEEK
CREATE TABLE
    PRO_FCST_RESULT_3WEEK_16 AS
SELECT
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    '201916' AS PLANWEEK,
    YEAR,
    WEEK,
    QTY,
    OUTFCST
FROM PRO_FCST_RESULT_3WEEK
WHERE 1=1
AND YEAR='2019'
AND WEEK='18';

--- 1-5. 17주차 PLANWEEK
CREATE TABLE
    PRO_FCST_RESULT_2WEEK_17 AS
SELECT
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    '201917' AS PLANWEEK,
    YEAR,
    WEEK,
    QTY,
    OUTFCST
FROM PRO_FCST_RESULT_2WEEK
WHERE 1=1
AND YEAR = '2019'
AND WEEK = '18';

--- 1-6. 18주차 PLANWEEK
CREATE TABLE
    PRO_FCST_RESULT_1WEEK_18 AS
SELECT
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    '201918' AS PLANWEEK,
    YEAR,
    WEEK,
    QTY,
    OUTFCST
FROM PRO_FCST_RESULT_1WEEK
WHERE 1=1
AND YEAR='2019'
AND WEEK='18';

SELECT * FROM PRO_FCST_RESULT_6WEEK_13;

-- STEP2. PLANWEEK생성한 테이블들을 합치고(UNION) PIVOT
CREATE TABLE
    PRO_FCST_RESULT_FINAL AS
SELECT * FROM
    (
        SELECT * FROM PRO_FCST_RESULT_6WEEK_13
        UNION SELECT * FROM 
            PRO_FCST_RESULT_5WEEK_14
        UNION SELECT * FROM
            PRO_FCST_RESULT_4WEEK_15
        UNION SELECT * FROM
            PRO_FCST_RESULT_3WEEK_16
        UNION SELECT * FROM
            PRO_FCST_RESULT_2WEEK_17
        UNION SELECT * FROM
            PRO_FCST_RESULT_1WEEK_18
            )
PIVOT(
    SUM(OUTFCST)
    FOR PLANWEEK IN
    ('201913' AS W6,
    '201914' AS W5,
    '201915' AS W4,
    '201916' AS W3,
    '201917' AS W2,
    '201918' AS W1)
    )
ORDER BY PRD_SEG1, PRD_SEG2, PRD_SEG3;

SELECT * FROM PRO_FCST_RESULT_FINAL;

--정확도 DETAIL 시작
CREATE TABLE PRO_FCST_RESULT_REALFINAL AS
SELECT
    PRD_SEG1,
    PRD_SEG2,
    PRD_SEG3,
    YEAR,
    WEEK,
    QTY,
    W6,
    W5,
    W4,
    W3,
    W2,
    W1,
    NVL2(W6,(ABS(W6-QTY)), QTY) AS ABS8W_W6,
    NVL2(W5,(ABS(W5-QTY)), QTY) AS ABS8W_W5,
    NVL2(W4,(ABS(W4-QTY)), QTY) AS ABS8W_W4,
    NVL2(W3,(ABS(W3-QTY)), QTY) AS ABS8W_W3,
    NVL2(W2,(ABS(W2-QTY)), QTY) AS ABS8W_W2,
    NVL2(W1,(ABS(W1-QTY)), QTY) AS ABS8W_W1,
    
--  과소예측 : 반 이하 예측 시 정확도 0(?)
--  가중치를 계산하는 공식(?)
    CASE WHEN W6=0 OR QTY=0 THEN 0
    WHEN QTY/W6>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W6,(ABS(W6-QTY)), QTY)/W6),9),0) END AS ACC8W_W6,
    CASE WHEN W5=0 OR QTY=0 THEN 0
    WHEN QTY/W5>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W5,(ABS(W5-QTY)),QTY)/W5),9),0) END AS ACC8W_W5,
    CASE WHEN W4=0 OR QTY=0 THEN 0
    WHEN QTY/W4>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W4,(ABS(W4-QTY)), QTY)/W4),9),0) END AS ACC8W_W4,
    CASE WHEN W3=0 OR QTY=0 THEN 0
    WHEN QTY/W3>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W3,(ABS(W3-QTY)), QTY)/W3),9),0) END AS ACC8W_W3,
    CASE WHEN W2=0 OR QTY=0 THEN 0
    WHEN QTY/W2>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W2,(ABS(W2-QTY)), QTY)/W2),9),0) END AS ACC8W_W2,
    CASE WHEN W1=0 OR QTY=0 THEN 0
    WHEN QTY/W1>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W1,(ABS(W1-QTY)), QTY)/W1),9),0) END AS ACC8W_W1,
--  예측값 * 과소예측값 : 예측값에 가중치를 주기 위하여(?)
    ROUND(NVL(W6 * 
    CASE WHEN W6=0 OR QTY=0 THEN 0
    WHEN QTY/W6>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W6,(ABS(W6-QTY)), QTY)/W6),9),0) END,0)) AS ACC8W_WW6,
    ROUND(NVL(W5*
    CASE WHEN W5=0 OR QTY=0 THEN 0
    WHEN QTY/W5>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W5,(ABS(W5-QTY)), QTY)/W5),9),0)END,0)) AS ACC8W_WW5,
    ROUND(NVL(W4*
    CASE WHEN W4=0 OR QTY=0 THEN 0
    WHEN QTY/W4>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W4,(ABS(W4-QTY)), QTY)/W4),9),0)END,0)) AS ACC8W_WW4,
    ROUND(NVL(W3*
    CASE WHEN W3=0 OR QTY=0 THEN 0
    WHEN QTY/W3>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W3,(ABS(W3-QTY)), QTY)/W3),9),0)END,0)) AS ACC8W_WW3,
    ROUND(NVL(W2*
    CASE WHEN W2=0 OR QTY=0 THEN 0
    WHEN QTY/W2>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W2,(ABS(W2-QTY)), QTY)/W2),9),0)END,0)) AS ACC8W_WW2,
    ROUND(NVL(W1*
    CASE WHEN W1=0 OR QTY=0 THEN 0
    WHEN QTY/W1>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W1,(ABS(W1-QTY)), QTY)/W1),9),0)END,0)) AS ACC8W_WW1,
--  주차별 예측값의 평균 구하기(FCST_AVG값 산출 : NULL값 처리 필요)
    (NVL(W6,0)+NVL(W5,0)+NVL(W4,0)+NVL(W3,0)+NVL(W2,0)+NVL(W1,0))
    /(NVL2(W6,1,0)+NVL2(W5,1,0)+NVL2(W4,1,0)+NVL2(W3,1,0)+NVL2(W2,1,0)+NVL2(W1,1,0))
    AS FCST_AVG,
--  예측값*과소예측값의 평균 구하기(ACC_AVG 산출 : ACC8W_WW6 ~ ACC8W_WW1값의 AVG)
    (ROUND(NVL(W6 * 
    CASE WHEN W6=0 OR QTY=0 THEN 0
    WHEN QTY/W6>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W6,(ABS(W6-QTY)), QTY)/W6),9),0) END,0)) +
    ROUND(NVL(W5*
    CASE WHEN W5=0 OR QTY=0 THEN 0
    WHEN QTY/W5>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W5,(ABS(W5-QTY)), QTY)/W5),9),0)END,0)) +
    ROUND(NVL(W4*
    CASE WHEN W4=0 OR QTY=0 THEN 0
    WHEN QTY/W4>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W4,(ABS(W4-QTY)), QTY)/W4),9),0)END,0)) +
    ROUND(NVL(W3*
    CASE WHEN W3=0 OR QTY=0 THEN 0
    WHEN QTY/W3>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W3,(ABS(W3-QTY)), QTY)/W3),9),0)END,0)) +
    ROUND(NVL(W2*
    CASE WHEN W2=0 OR QTY=0 THEN 0
    WHEN QTY/W2>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W2,(ABS(W2-QTY)), QTY)/W2),9),0)END,0)) +
    ROUND(NVL(W1*
    CASE WHEN W1=0 OR QTY=0 THEN 0
    WHEN QTY/W1>2 THEN 0
    ELSE NVL(1-ROUND((NVL2(W1,(ABS(W1-QTY)), QTY)/W1),9),0)END,0)))/6 AS ACC_AVG
FROM PRO_FCST_RESULT_FINAL;

SELECT * FROM PRO_FCST_RESULT_REALFINAL;

--정확도 결과
SELECT PRD_SEG1
       ,SUM(FCST_AVG) AS SUM_FCST_AVG
       ,SUM(ACC_AVG) AS SUM_ACC_AVG
       ,SUM(ACC_AVG)/SUM(FCST_AVG) AS ACC_FCST_AVG
       FROM PRO_FCST_RESULT_REALFINAL
GROUP BY PRD_SEG1
ORDER BY PRD_SEG1;




